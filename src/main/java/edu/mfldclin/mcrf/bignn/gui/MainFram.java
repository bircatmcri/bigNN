package edu.mfldclin.mcrf.bignn.gui;

import edu.mfldclin.mcrf.bignn.setting.Setting;
import edu.mfldclin.mcrf.bignn.setting.TokenPreProcessType;
import edu.mfldclin.mcrf.bignn.learning.ParagraphVectorsClassifierExample;
import edu.mfldclin.mcrf.bignn.evaluation.Evaluation;
import edu.mfldclin.mcrf.deepsparktext.gui.GuiUtils;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.ChangeEvent;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaSparkContext;

public class MainFram extends javax.swing.JFrame {

    private static final String TRAINING_DIR = "/training";
    private static final String DATA_DIR = "/testing";
    private int SIZE_OF_ONE_SHOT = 100;

    private JFileChooser fileChooser;
    private File dir, trainingDir, dataDir;
    private JavaSparkContext sc;
    private Setting setting;

    //private ThreeShotsTest app;
    private ParagraphVectorsClassifierExample app;
    private int shots;
    private Evaluation result;
    private Evaluation textTesult;

    /*
    private ParagraphVectors paragraphVectors;
    private LabelAwareIterator iterator;
    private TokenizerFactory tokenizerFactory;*/
    /**
     * Creates new form MainFram
     */
    public MainFram() {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }

        initComponents();
        myInitComponents();
        setEventHandlers();
        //settingComponentsEventHandlers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgTokenizePreProcess = new javax.swing.ButtonGroup();
        jtpMain = new javax.swing.JTabbedPane();
        pnlLoadTokenize = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnDirectory = new javax.swing.JButton();
        prgLoad = new javax.swing.JProgressBar();
        lblTrainingDir = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaLogTokenize = new javax.swing.JTextArea();
        lblDataDir = new javax.swing.JLabel();
        btnLoad = new javax.swing.JButton();
        pnlTrainClassify = new javax.swing.JPanel();
        btnStartTraining = new javax.swing.JButton();
        prgTraining = new javax.swing.JProgressBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        txaLogTrain = new javax.swing.JTextArea();
        pnlSettings = new javax.swing.JPanel();
        jtpSettings = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtSparkExecutors = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAkkaThreads = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btnApplySpark = new javax.swing.JButton();
        pnlSettingDL4J = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtDL4JLearningRate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDL4JBatchSize = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDL4JMinWordFrequency = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtDL4JLayerSize = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtDL4JEpochs = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        lblWindowSize = new javax.swing.JLabel();
        txtDL4JWindowSize = new javax.swing.JTextField();
        lblWindowSizeDes = new javax.swing.JLabel();
        btnApplyDL4J = new javax.swing.JButton();
        lblIterations = new javax.swing.JLabel();
        lblIterationsDes = new javax.swing.JLabel();
        txtDL4JIterations = new javax.swing.JTextField();
        pnlTokenization = new javax.swing.JPanel();
        rdbCommonPreProcess = new javax.swing.JRadioButton();
        rdbStemmingPreProcess = new javax.swing.JRadioButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        btnApplyDL4JTokenize = new javax.swing.JButton();
        pnlSettingGui = new javax.swing.JPanel();
        tgbJavaLookFeel = new javax.swing.JToggleButton();
        lblLogo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Directory:");
        jLabel1.setToolTipText("");

        btnDirectory.setLabel("Choos a Directory");
        btnDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDirectoryActionPerformed(evt);
            }
        });

        lblTrainingDir.setToolTipText("");

        txaLogTokenize.setColumns(20);
        txaLogTokenize.setRows(5);
        jScrollPane2.setViewportView(txaLogTokenize);

        lblDataDir.setToolTipText("");

        btnLoad.setText("Start Loading & Tokenizing");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlLoadTokenizeLayout = new javax.swing.GroupLayout(pnlLoadTokenize);
        pnlLoadTokenize.setLayout(pnlLoadTokenizeLayout);
        pnlLoadTokenizeLayout.setHorizontalGroup(
            pnlLoadTokenizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadTokenizeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLoadTokenizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(prgLoad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTrainingDir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDataDir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlLoadTokenizeLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlLoadTokenizeLayout.createSequentialGroup()
                        .addComponent(btnDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoad, javax.swing.GroupLayout.DEFAULT_SIZE, 873, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlLoadTokenizeLayout.setVerticalGroup(
            pnlLoadTokenizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLoadTokenizeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlLoadTokenizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDirectory)
                    .addComponent(btnLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTrainingDir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDataDir)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prgLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpMain.addTab("Loading & Tokenizing", pnlLoadTokenize);

        btnStartTraining.setText("Start Training & Testing");
        btnStartTraining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartTrainingActionPerformed(evt);
            }
        });

        txaLogTrain.setColumns(20);
        txaLogTrain.setRows(5);
        jScrollPane3.setViewportView(txaLogTrain);

        javax.swing.GroupLayout pnlTrainClassifyLayout = new javax.swing.GroupLayout(pnlTrainClassify);
        pnlTrainClassify.setLayout(pnlTrainClassifyLayout);
        pnlTrainClassifyLayout.setHorizontalGroup(
            pnlTrainClassifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTrainClassifyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTrainClassifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStartTraining, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(prgTraining, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1067, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlTrainClassifyLayout.setVerticalGroup(
            pnlTrainClassifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTrainClassifyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnStartTraining)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prgTraining, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtpMain.addTab("Training & Testing", pnlTrainClassify);

        jLabel2.setText("Local executors:");

        txtSparkExecutors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSparkExecutorsActionPerformed(evt);
            }
        });

        jLabel3.setText("AKKA threads:");

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel14.setText("<html>This is the number of threads to use for communication. Can be useful to increase on large clusters<br/> when the driver has a lot of CPU cores.</html>");

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel15.setText("<html>This is the maximum number of threads can help running the program in a distributed context. </html>");

        btnApplySpark.setText("Apply");
        btnApplySpark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplySparkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 877, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSparkExecutors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAkkaThreads, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnApplySpark)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSparkExecutors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtAkkaThreads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 395, Short.MAX_VALUE)
                .addComponent(btnApplySpark)
                .addContainerGap())
        );

        jtpSettings.addTab("Spark", jPanel1);

        jLabel4.setText("Learning rate:");

        jLabel5.setText("Batch size:");

        jLabel6.setText("Minimum word frequency:");

        jLabel7.setText("Layer size:");

        jLabel8.setText("Epochs:");

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel9.setText("<html>This is the step size for each update of the coefficients,<br/>as words are re-positioned in the feature space.</html>");

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel10.setText("<html>This is the amount of words we process at a time. The target size (in words) for batches<br/>of examples passes to worker threads.</html>");

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel11.setText("<html>It allows ignoring all words with total frequency lower than this.</html>");

        jLabel12.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel12.setText("<html>This is the number of features in the word vector. </html>");

        jLabel13.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel13.setText("<html>This is the number of forward and backward passes of all training examples.</html>");

        jLabel16.setText("%");

        lblWindowSize.setText("Window size:");

        lblWindowSizeDes.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        lblWindowSizeDes.setText("<html>It defines context window size.</html>");

        btnApplyDL4J.setText("Apply");
        btnApplyDL4J.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyDL4JActionPerformed(evt);
            }
        });

        lblIterations.setText("Iterations:");

        lblIterationsDes.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        lblIterationsDes.setText("<html>bla bla bla</html>");

        javax.swing.GroupLayout pnlSettingDL4JLayout = new javax.swing.GroupLayout(pnlSettingDL4J);
        pnlSettingDL4J.setLayout(pnlSettingDL4JLayout);
        pnlSettingDL4JLayout.setHorizontalGroup(
            pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingDL4JLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlSettingDL4JLayout.createSequentialGroup()
                        .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addGroup(pnlSettingDL4JLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 708, Short.MAX_VALUE)
                                .addGap(78, 78, 78))
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addGap(86, 86, 86)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDL4JMinWordFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDL4JLayerSize, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDL4JEpochs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDL4JBatchSize, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDL4JLearningRate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlSettingDL4JLayout.createSequentialGroup()
                        .addComponent(lblWindowSize)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDL4JWindowSize, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSettingDL4JLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnApplyDL4J))
                    .addGroup(pnlSettingDL4JLayout.createSequentialGroup()
                        .addComponent(lblIterations)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDL4JIterations, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlSettingDL4JLayout.createSequentialGroup()
                        .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblWindowSizeDes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIterationsDes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlSettingDL4JLayout.setVerticalGroup(
            pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingDL4JLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDL4JLearningRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtDL4JBatchSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDL4JMinWordFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDL4JLayerSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtDL4JEpochs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWindowSize)
                    .addComponent(txtDL4JWindowSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWindowSizeDes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(pnlSettingDL4JLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIterations)
                    .addComponent(txtDL4JIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblIterationsDes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(btnApplyDL4J)
                .addContainerGap())
        );

        jtpSettings.addTab("Neural Network Configuration", pnlSettingDL4J);

        btgTokenizePreProcess.add(rdbCommonPreProcess);
        rdbCommonPreProcess.setText("Common");
        rdbCommonPreProcess.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdbCommonPreProcessStateChanged(evt);
            }
        });

        btgTokenizePreProcess.add(rdbStemmingPreProcess);
        rdbStemmingPreProcess.setText("Stemming");
        rdbStemmingPreProcess.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rdbStemmingPreProcessStateChanged(evt);
            }
        });
        rdbStemmingPreProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbStemmingPreProcessActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel17.setText("<html>This allows common tokenization including text normalization.</html>");

        jLabel18.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel18.setText("<html>It uses Porter stemming algorithm to stem all words in the contents. </html>");

        btnApplyDL4JTokenize.setText("Apply");
        btnApplyDL4JTokenize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyDL4JTokenizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTokenizationLayout = new javax.swing.GroupLayout(pnlTokenization);
        pnlTokenization.setLayout(pnlTokenizationLayout);
        pnlTokenizationLayout.setHorizontalGroup(
            pnlTokenizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTokenizationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTokenizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbCommonPreProcess)
                    .addComponent(rdbStemmingPreProcess)
                    .addGroup(pnlTokenizationLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(pnlTokenizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(710, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTokenizationLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnApplyDL4JTokenize)
                .addContainerGap())
        );
        pnlTokenizationLayout.setVerticalGroup(
            pnlTokenizationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTokenizationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbCommonPreProcess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(rdbStemmingPreProcess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 386, Short.MAX_VALUE)
                .addComponent(btnApplyDL4JTokenize)
                .addContainerGap())
        );

        jtpSettings.addTab("Tokenization", pnlTokenization);

        tgbJavaLookFeel.setText("Java Look & Feel");
        tgbJavaLookFeel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tgbJavaLookFeelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSettingGuiLayout = new javax.swing.GroupLayout(pnlSettingGui);
        pnlSettingGui.setLayout(pnlSettingGuiLayout);
        pnlSettingGuiLayout.setHorizontalGroup(
            pnlSettingGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingGuiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tgbJavaLookFeel, javax.swing.GroupLayout.DEFAULT_SIZE, 1065, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlSettingGuiLayout.setVerticalGroup(
            pnlSettingGuiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSettingGuiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tgbJavaLookFeel)
                .addContainerGap(518, Short.MAX_VALUE))
        );

        jtpSettings.addTab("GUI", pnlSettingGui);

        javax.swing.GroupLayout pnlSettingsLayout = new javax.swing.GroupLayout(pnlSettings);
        pnlSettings.setLayout(pnlSettingsLayout);
        pnlSettingsLayout.setHorizontalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpSettings)
        );
        pnlSettingsLayout.setVerticalGroup(
            pnlSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpSettings)
        );

        jtpMain.addTab("Settings", pnlSettings);

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo_small.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpMain)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblLogo)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jtpMain)
                .addGap(18, 18, 18)
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tgbJavaLookFeelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tgbJavaLookFeelActionPerformed
        tgbJavaLookFeelOnClick(evt);
    }//GEN-LAST:event_tgbJavaLookFeelActionPerformed

    private void btnApplyDL4JTokenizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyDL4JTokenizeActionPerformed
        btnApplyDL4JTokenizeOnClick();
    }//GEN-LAST:event_btnApplyDL4JTokenizeActionPerformed

    private void rdbStemmingPreProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbStemmingPreProcessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rdbStemmingPreProcessActionPerformed

    private void rdbStemmingPreProcessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdbStemmingPreProcessStateChanged
        if (rdbStemmingPreProcess.isSelected()) {
            setting.setTokenPreProcessType(TokenPreProcessType.STEAMING);
        }
    }//GEN-LAST:event_rdbStemmingPreProcessStateChanged

    private void rdbCommonPreProcessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rdbCommonPreProcessStateChanged
        if (rdbCommonPreProcess.isSelected()) {
            setting.setTokenPreProcessType(TokenPreProcessType.COMMON);
        }
    }//GEN-LAST:event_rdbCommonPreProcessStateChanged

    private void btnApplyDL4JActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyDL4JActionPerformed
        btnApplyDL4JOnClick(evt);
    }//GEN-LAST:event_btnApplyDL4JActionPerformed

    private void btnApplySparkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplySparkActionPerformed
        btnApplySparkOnClick(evt);
    }//GEN-LAST:event_btnApplySparkActionPerformed

    private void txtSparkExecutorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSparkExecutorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSparkExecutorsActionPerformed

    private void btnStartTrainingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartTrainingActionPerformed
        btnStartTrainingOnClick(evt);
    }//GEN-LAST:event_btnStartTrainingActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        btnLoadOnClick(evt);
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDirectoryActionPerformed
        btnTrainingDirectoryOnClick(evt);
    }//GEN-LAST:event_btnDirectoryActionPerformed

    /**
     * @param args the command line arguments
     * @throws FileNotFoundException
     */
    public static void main(String args[]) throws FileNotFoundException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

 /*File file = new File("d:\\test.txt");
     	FileOutputStream fis = new FileOutputStream(file);
     	PrintStream out = new PrintStream(fis);
     	System.setOut(out);*/
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFram().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgTokenizePreProcess;
    private javax.swing.JButton btnApplyDL4J;
    private javax.swing.JButton btnApplyDL4JTokenize;
    private javax.swing.JButton btnApplySpark;
    private javax.swing.JButton btnDirectory;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnStartTraining;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jtpMain;
    private javax.swing.JTabbedPane jtpSettings;
    private javax.swing.JLabel lblDataDir;
    private javax.swing.JLabel lblIterations;
    private javax.swing.JLabel lblIterationsDes;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblTrainingDir;
    private javax.swing.JLabel lblWindowSize;
    private javax.swing.JLabel lblWindowSizeDes;
    private javax.swing.JPanel pnlLoadTokenize;
    private javax.swing.JPanel pnlSettingDL4J;
    private javax.swing.JPanel pnlSettingGui;
    private javax.swing.JPanel pnlSettings;
    private javax.swing.JPanel pnlTokenization;
    private javax.swing.JPanel pnlTrainClassify;
    private javax.swing.JProgressBar prgLoad;
    private javax.swing.JProgressBar prgTraining;
    private javax.swing.JRadioButton rdbCommonPreProcess;
    private javax.swing.JRadioButton rdbStemmingPreProcess;
    private javax.swing.JToggleButton tgbJavaLookFeel;
    private javax.swing.JTextArea txaLogTokenize;
    private javax.swing.JTextArea txaLogTrain;
    private javax.swing.JTextField txtAkkaThreads;
    private javax.swing.JTextField txtDL4JBatchSize;
    private javax.swing.JTextField txtDL4JEpochs;
    private javax.swing.JTextField txtDL4JIterations;
    private javax.swing.JTextField txtDL4JLayerSize;
    private javax.swing.JTextField txtDL4JLearningRate;
    private javax.swing.JTextField txtDL4JMinWordFrequency;
    private javax.swing.JTextField txtDL4JWindowSize;
    private javax.swing.JTextField txtSparkExecutors;
    // End of variables declaration//GEN-END:variables

    private void myInitComponents() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        prgLoad.setEnabled(false);
        btnStartTraining.setEnabled(false);
        btnStartTraining.setFont(new Font(btnStartTraining.getFont().getFontName(), Font.BOLD, btnStartTraining.getFont().getSize()));
        btnLoad.setEnabled(false);
        btnLoad.setFont(new Font(btnLoad.getFont().getFontName(), Font.BOLD, btnLoad.getFont().getSize()));

        setting = Setting.makeDefault();

        populateSettingValues(setting);

        txaLogTokenize.setEditable(false);
        txaLogTrain.setEditable(false);
        jtpMain.setEnabledAt(1, false);

        Image img = GuiUtils.getIcon();
        setIconImage(img);
        List<Image> list = new ArrayList<>();
        list.add(img);
        setIconImages(list);

        //lblWindowSize.setVisible(false);
        //lblWindowSizeDes.setVisible(false);
        //txtDL4JWindowSize.setVisible(false);
    }

    private void logTokenize(String message) {
        txaLogTokenize.append(message + "\n");
    }

    private void logClassify(String message) {
        txaLogTrain.append(message + "\n");
    }

    private void btnTrainingDirectoryOnClick(ActionEvent evt) {
        prgLoad.setEnabled(true);

        if (fileChooser == null) {
            fileChooser = new JFileChooser(System.getProperty("user.home"));
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }

        int showOpenDialog = fileChooser.showOpenDialog(this);

        if (showOpenDialog == JFileChooser.APPROVE_OPTION) {
            dir = fileChooser.getSelectedFile();

            trainingDir = new File(dir, TRAINING_DIR);
            dataDir = new File(dir, DATA_DIR);

            boolean dirsAreOK = true;

            if (!trainingDir.exists() || !trainingDir.isDirectory()) {
                dirsAreOK = false;
                logTokenize("Directory does not exist. " + trainingDir.getAbsolutePath());
            }

            if (!dataDir.exists() || !dataDir.isDirectory()) {
                dirsAreOK = false;
                logTokenize("Directory does not exist. " + dataDir.getAbsolutePath());
            }

            if (dirsAreOK) {
                lblTrainingDir.setText(trainingDir.getAbsolutePath());
                lblDataDir.setText(dataDir.getAbsolutePath());

                File[] listFiles = trainingDir.listFiles((File f) -> {
                    return f.isDirectory();
                });

                logTokenize("Training types:");

                for (File f : listFiles) {
                    logTokenize(f.getName());
                }

                prgLoad.setIndeterminate(false);
                btnLoad.setEnabled(true);

                shots = 0;
                //result = new Evaluation[3];
            }
        }
    }

    private void disableAll() {
        prgLoad.setIndeterminate(true);
        prgTraining.setIndeterminate(true);
        jtpMain.setEnabledAt(1, false);
        btnStartTraining.setEnabled(false);
        btnLoad.setEnabled(false);
        btnDirectory.setEnabled(false);
        setEnabled(false);
    }

    private void enableAll() {
        prgLoad.setIndeterminate(false);
        prgTraining.setIndeterminate(false);
        setEnabled(true);
        btnDirectory.setEnabled(true);
        jtpMain.setEnabledAt(1, true);
    }

    private void btnStartTrainingOnClick(ActionEvent evt) {
        doTraining();
    }

    /*
    private void settingComponentsEventHandlers() {

        txtSparkExecutors.getDocument().addDocumentListener(new SettingFieldChangeListener(e -> {
            try {
                int value = Integer.parseInt(txtSparkExecutors.getText());
                setting.setSparkExecutors(value);
            } catch (NumberFormatException ex) {
                //ex.printStackTrace();
            }
        }));

        txtAkkaThreads.getDocument().addDocumentListener(new SettingFieldChangeListener(e -> {
            try {
                int value = Integer.parseInt(txtAkkaThreads.getText());
                setting.setSparkSkkaThreads(value);
            } catch (NumberFormatException ex) {
                //ex.printStackTrace();
            }
        }));

        txtDL4JBatchSize.getDocument().addDocumentListener(new SettingFieldChangeListener(e -> {
            try {
                int value = Integer.parseInt(txtDL4JBatchSize.getText());
                setting.setDl4jBatchSize(value);
            } catch (NumberFormatException ex) {
                //ex.printStackTrace();
            }
        }));

        txtDL4JEpochs.getDocument().addDocumentListener(new SettingFieldChangeListener(e -> {
            try {
                int value = Integer.parseInt(txtDL4JEpochs.getText());
                setting.setDl4jEpochs(value);
            } catch (NumberFormatException ex) {
                //ex.printStackTrace();
            }
        }));

        txtDL4JLayerSize.getDocument().addDocumentListener(new SettingFieldChangeListener(e -> {
            try {
                int value = Integer.parseInt(txtDL4JLayerSize.getText());
                setting.setDl4jLayerSize(value);
            } catch (NumberFormatException ex) {
                //ex.printStackTrace();
            }
        }));

        txtDL4JLearningRate.getDocument().addDocumentListener(new SettingFieldChangeListener(e -> {
            try {
                double value = Double.parseDouble(txtDL4JLearningRate.getText());
                setting.setDl4jLearningRate(value);
            } catch (NumberFormatException ex) {
                //ex.printStackTrace();
            }
        }));

        txtDL4JMinWordFrequency.getDocument().addDocumentListener(new SettingFieldChangeListener(e -> {
            try {
                int value = Integer.parseInt(txtDL4JMinWordFrequency.getText());
                setting.setDl4jMinWordFrequency(value);
            } catch (NumberFormatException ex) {
                //ex.printStackTrace();
            }
        }));
    }
     */
    private void populateSettingValues(Setting setting) {
        txtSparkExecutors.setText(setting.getSparkExecutors() + "");
        txtAkkaThreads.setText(setting.getSparkSkkaThreads() + "");
        txtDL4JBatchSize.setText(setting.getDl4jBatchSize() + "");
        txtDL4JEpochs.setText(setting.getDl4jEpochs() + "");
        txtDL4JLayerSize.setText(setting.getDl4jLayerSize() + "");
        txtDL4JLearningRate.setText(setting.getDl4jLearningRate() + "");
        txtDL4JMinWordFrequency.setText(setting.getDl4jMinWordFrequency() + "");
        rdbCommonPreProcess.setSelected(setting.getTokenPreProcessType().equals(TokenPreProcessType.COMMON));
        rdbStemmingPreProcess.setSelected(setting.getTokenPreProcessType().equals(TokenPreProcessType.STEAMING));
        txtDL4JWindowSize.setText(setting.getDl4jWindowSize() + "");

        if (setting.getTokenPreProcessType() == TokenPreProcessType.COMMON) {
            rdbCommonPreProcess.setSelected(true);
        } else if (setting.getTokenPreProcessType() == TokenPreProcessType.STEAMING) {
            rdbStemmingPreProcess.setSelected(true);
        } else {
            rdbCommonPreProcess.setSelected(true);
        }

        txtDL4JIterations.setText(setting.getDl4jIterations() + "");
    }

    private void setEventHandlers() {
        jtpMain.addChangeListener((ChangeEvent e) -> {
            populateSettingValues(setting);
        });
    }

    private void doTraining() {
        logClassify(setting.toString());
        try {
            new Thread(() -> {
                try {
                    //    for (shots = 0; shots < 1; shots++) {

                    //logClassify("Copying data to 'testing' directory. " /*+ (shots + 1)*/);
                    /*
                        switch (shots) {
                            case 0:
                                app.copyFirstShot();
                                break;
                            case 1:
                                //app.copySecondShot();
                                break;
                            case 2:
                                //app.copyThirdShot();
                                break;
                        }
                     */
                    disableAll();
                    long startTime = System.currentTimeMillis();

                    //makeParagraphVectors(sc);
                    logClassify("Training and Testing...");
                    app.makeParagraphVectors(sc);

                    result = app.checkUnlabeledData();

                    long endTime = System.currentTimeMillis();
                    logClassify("Time: " + millisecondsToMins(endTime - startTime));
                    //logClassify(result);
                    enableAll();

                    //if (shots == 2) {
                    showBestResult(result);
                    //}
                    //}
                } catch (Exception ex) {
                    ex.printStackTrace();

                }
            }).start();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, GuiUtils.getErrorIcon());
            ex.printStackTrace();
        }
    }

    private SparkConf createSparkConf(Setting s) {
        SparkConf sparkConf = new SparkConf();
        //sparkConf.setMaster("spark://192.168.0.200:7077");
        sparkConf.setMaster("local[" + s.getSparkExecutors() + "]");
        sparkConf.setAppName("DeepSparkText");
        sparkConf.set("spark.akka.threads", "" + s.getSparkSkkaThreads());

        return sparkConf;
    }

    private void tgbJavaLookFeelOnClick(ActionEvent evt) {
        if (tgbJavaLookFeel.isSelected()) {
            try {
                UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                ex.printStackTrace();
            }
        } else {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                ex.printStackTrace();
            }
        }

        SwingUtilities.updateComponentTreeUI(this);
        pack();

    }

    private String millisecondsToMins(long milliseconds) {
        return String.format("%02d min, %02d sec",
                TimeUnit.MILLISECONDS.toMinutes(milliseconds),
                TimeUnit.MILLISECONDS.toSeconds(milliseconds)
                - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds))
        );
    }

    private void btnLoadOnClick(ActionEvent evt) {
        logTokenize(setting.toString());
        try {
            SparkConf sparkConf = createSparkConf(setting);

            if (sc == null) {
                sc = new JavaSparkContext(sparkConf);
            }

            if (shots == 0) {
                //app = new ThreeShotsTest(trainingDir, dataDir, setting, SIZE_OF_ONE_SHOT);
                app = new ParagraphVectorsClassifierExample(trainingDir, dataDir, setting);
            }

            new Thread(() -> {
                try {
                    disableAll();

                    //   logTokenize("Copying data to 'temp' directory, from training directory. ");
                    // app.moveToTempAllThreeShots();
                    logTokenize("Loading and Tokenizing...");
                    long startTime = System.currentTimeMillis();
                    app.listIterator2(sc);

                    app.Tokenize(sc);
                    long endTime = System.currentTimeMillis();
                    logTokenize("Time: " + millisecondsToMins(endTime - startTime));

                    enableAll();
                    jtpMain.setEnabledAt(1, true);
                    btnStartTraining.setEnabled(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }).start();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE, GuiUtils.getErrorIcon());
            ex.printStackTrace();
        }
    }

    private void btnApplySparkOnClick(ActionEvent evt) {
        try {
            setting.setSparkExecutors(Integer.parseInt(txtSparkExecutors.getText()));
            setting.setSparkSkkaThreads(Integer.parseInt(txtAkkaThreads.getText()));
            JOptionPane.showMessageDialog(this, "New settings applied.", "Info", JOptionPane.INFORMATION_MESSAGE, GuiUtils.getInfoIcon());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Enter numeric values!", "Error", JOptionPane.WARNING_MESSAGE, GuiUtils.getWarningIcon());
        }
    }

    private void btnApplyDL4JOnClick(ActionEvent evt) {
        try {
            setting.setDl4jBatchSize(Integer.parseInt(txtDL4JBatchSize.getText()));
            setting.setDl4jEpochs(Integer.parseInt(txtDL4JEpochs.getText()));
            setting.setDl4jLayerSize(Integer.parseInt(txtDL4JLayerSize.getText()));
            setting.setDl4jLearningRate(Double.parseDouble(txtDL4JLearningRate.getText()));
            setting.setDl4jMinWordFrequency(Integer.parseInt(txtDL4JMinWordFrequency.getText()));
            setting.setDl4jWindowSize(Integer.parseInt(txtDL4JWindowSize.getText()));
            setting.setDl4jIterations(Integer.parseInt(txtDL4JIterations.getText()));

            JOptionPane.showMessageDialog(this, "New settings applied.", "Info", JOptionPane.INFORMATION_MESSAGE, GuiUtils.getInfoIcon());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Enter numeric values!", "Error", JOptionPane.WARNING_MESSAGE, GuiUtils.getWarningIcon());
        }
    }

    private void btnApplyDL4JTokenizeOnClick() {
        setting.setTokenPreProcessType(rdbCommonPreProcess.isSelected() ? TokenPreProcessType.COMMON : TokenPreProcessType.STEAMING);
        JOptionPane.showMessageDialog(this, "New settings applied.", "Info", JOptionPane.INFORMATION_MESSAGE, GuiUtils.getInfoIcon());
    }

    private void showBestResult(Evaluation result) {
        Evaluation best = result;

        /*
        if (result[1].accuracy() > best.accuracy()) {
            best = result[1];
        }

        if (result[2].accuracy() > best.accuracy()) {
            best = result[2];
        }*/
        StringBuilder textResult = new StringBuilder("\n");

        textResult.append("Precision: ").append(best.precision() + "\n");
        textResult.append("Recall: ").append(best.recall() + "\n");
        textResult.append("Accuracy: ").append(best.accuracy());

        logClassify(textResult.toString());
    }

}
